name: Daily Challenge News

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Generate Daily Challenge News
        run: |
          python - <<'PYCODE'
          import json, os, datetime, subprocess
          challenges_dir = "challenges"; news_file = "challenge_news.json"
          Date = datetime.datetime.now(); date_str = f"{Date.month}/{Date.day}/{Date.year}"

          def join_list(items):
              if len(items) == 1: return items[0]
              elif len(items) == 2: return f"{items[0]} and {items[1]}"
              else: return ", ".join(items[:-1]) + f", and {items[-1]}"

          def sort_dates(date_list):
              def to_dt(d): m, day, y = map(int, d.split("/")); return datetime.date(y, m, day)
              return sorted(date_list, key=to_dt)

          if os.path.exists(news_file):
              with open(news_file, "r", encoding="utf-8") as f:
                  try:
                      news_data = json.load(f)
                      if not isinstance(news_data, list): news_data = [news_data]
                  except json.JSONDecodeError: news_data = []
          else: news_data = []
          result = subprocess.run(["git", "diff", "--name-only", "HEAD~1", "HEAD"], capture_output=True, text=True)
          changed_files = [f.strip() for f in result.stdout.splitlines() if f.strip()]
          print("Changed files:", changed_files)
          generator_changed = "DailyChallengeGen.py" in changed_files; messages = []; date_status = {}

          if generator_changed:
              result = subprocess.run(["git", "log", "-1", "--pretty=%B"], capture_output=True, text=True)
              last_commit_msg = result.stdout.lower()
              if "new type" in last_commit_msg or "add type" in last_commit_msg: messages.append("New Daily Challenge type is now public.")
              elif "fix" in last_commit_msg or "bug" in last_commit_msg: messages.append("Bugs in the Daily Challenge generator were patched.")
              else: messages.append("The Daily Challenge generator was updated.")

          modified_challenges = [f for f in changed_files if f.startswith("challenges/") and f.endswith(".json")]
          for file_path in modified_challenges:
              with open(file_path, "r", encoding="utf-8") as f:
                  try: data = json.load(f)
                  except json.JSONDecodeError: continue

              filename = os.path.splitext(os.path.basename(file_path))[0]; date_part = filename.replace("-", "/")
              if date_part not in date_status: date_status[date_part] = {"verifiers": [], "difficult": False, "generated": False}
              if data.get("verified") and data.get("verifier") and data.get("verifier").lower() != "none": date_status[date_part]["verifiers"].append(data["verifier"])
              if data.get("difficult") is True: date_status[date_part]["difficult"] = True
              if not data.get("verified") and not data.get("difficult"): date_status[date_part]["generated"] = True

          for date_key in sort_dates(list(date_status.keys())):
              status = date_status[date_key]; parts = []
              if status["verifiers"]:
                  unique_verifiers = sorted(set(status["verifiers"]))
                  verifiers_str = join_list(unique_verifiers)
                  parts.append(f"verified by {verifiers_str}")
              if status["difficult"]: parts.append("marked as difficult")
              if status["generated"] and not parts: parts.append("generated")
              message = f"Daily Challenge for {date_key} " + " and ".join(parts) + "."; messages.append(message)

          if messages:
              combined_message = "\n".join(messages)
              new_entry = {"date": date_str, "message": combined_message}
              news_data.append(new_entry)
              with open(news_file, "w", encoding="utf-8") as f: json.dump(news_data, f, indent=2)
              print("Updated news file with:", combined_message)
          else: print("No messages generated â€” no updates.")
          PYCODE

      - name: Commit & push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add challenge_news.json
          git commit -m "Update news" || echo "No changes to commit"
          git push

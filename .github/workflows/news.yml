name: Daily Challenge News

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Daily Challenge News
        run: |
          python - <<'PYCODE'
          import json, os, datetime
          news_file = "challenge_news.json"
          changes_file = "recent_changes.txt"
          Date = datetime.datetime.now(); date_str = f"{Date.month}/{Date.day}/{Date.year}"

          def join_list(items):
              if len(items) == 1: return items[0]
              elif len(items) == 2: return f"{items[0]} and {items[1]}"
              else: return ", ".join(items[:-1]) + f", and {items[-1]}"

          def sort_dates(date_list):
              def to_dt(d): m, day, y = map(int, d.split("/")); return datetime.date(y, m, day)
              return sorted(date_list, key=to_dt)

          if os.path.exists(news_file):
              with open(news_file, "r", encoding="utf-8") as f:
                  try:
                      news_data = json.load(f)
                      if not isinstance(news_data, list): news_data = [news_data]
                  except json.JSONDecodeError: news_data = []
          else: news_data = []

          if not os.path.exists(changes_file): print("No recent_changes.txt found — nothing to report."); os._exit(1)
          with open(changes_file, "r", encoding="utf-8") as f: lines = [line.strip() for line in f.readlines() if line.strip()]
          if not lines: print("recent_changes.txt is empty — nothing to report."); os._exit(0)
          date_status = {}

          for line in lines:
              if line.startswith("VERIF:"):
                  # Format: VERIF: M/D/Y BY Verifier
                  try:
                      parts = line.split("BY")
                      date_part = parts[0].replace("VERIF:", "").strip()
                      verifier = parts[1].strip()
                      date_status.setdefault(date_part, {"verifiers": set(), "difficult": False, "generated": False})
                      date_status[date_part]["verifiers"].add(verifier)
                  except Exception as e: print(f"Skipping malformed verification line: {line} ({e})")
              elif line.startswith("DIFF:"):
                  # Format: DIFF: M/D/Y
                  date_part = line.replace("DIFF:", "").strip()
                  date_status.setdefault(date_part, {"verifiers": set(), "difficult": False, "generated": False})
                  date_status[date_part]["difficult"] = True
              elif line.startswith("GEN:"):
                  # Format: GEN: M/D/Y
                  date_part = line.replace("GEN:", "").strip()
                  date_status.setdefault(date_part, {"verifiers": set(), "difficult": False, "generated": False})
                  date_status[date_part]["generated"] = True
              else: print(f"Skipping unrecognised line: {line}")

          if not date_status: print("No valid updates found in recent_changes.txt."); os._exit(0)
          messages = []
          for date_key in sort_dates(list(date_status.keys())):
              status = date_status[date_key]; parts = []
              if status["verifiers"]:
                  verifiers_str = join_list(sorted(status["verifiers"]))
                  parts.append(f"verified by {verifiers_str}")
              if status["difficult"]: parts.append("marked as difficult")
              if status["generated"] and not (status["verifiers"] or status["difficult"]): parts.append("generated")
              message = f"Daily Challenge for {date_key} " + " and ".join(parts) + "."; messages.append(message)

          if not messages: print("Nothing to add to news."); os._exit(0)
          combined_message = "\n".join(messages)
          new_entry = {"date": date_str, "message": combined_message}
          existing_entry = next((entry for entry in news_data if entry["date"] == date_str), None)
          if existing_entry: existing_entry["message"] += "\n" + combined_message
          else: news_data.append(new_entry)
          with open(news_file, "w", encoding="utf-8") as f: json.dump(news_data, f, indent=2)
          print("Updated challenge_news.json with:\n", combined_message)
          PYCODE

      - name: Clear recent_changes.txt
        run: |
          echo "" > recent_changes.txt

      - name: Commit & push updates
        run: |
          DATE=$(date +"%m/%d/%Y")
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add challenge_news.json recent_changes.txt
          git commit -m "Update challenge news (${DATE})" || echo "No changes to commit"
          git push
